import ICAL from 'ical.js';
import fetch from 'node-fetch';

export default async function handler(req, res) {
  try {
    // Get encoded URL from the path
    const { encodedUrl } = req.query;

    if (!encodedUrl) {
      return res.status(400).json({ error: 'Missing encodedUrl parameter' });
    }

    // Base64 decoding function with URL safe characters
    const base64Decode = (str) => {
      try {
        // Replace URL-safe chars and add padding
        const base64 = str.replace(/-/g, '+').replace(/_/g, '/');
        const paddedBase64 = base64.padEnd(base64.length + (4 - (base64.length % 4)) % 4, '=');

        // Use Buffer in Node.js environment
        return Buffer.from(paddedBase64, 'base64').toString();
      } catch (err) {
        console.error('Base64 decoding error:', err);
        return null;
      }
    };

    // Decode URL
    const calendarUrl = base64Decode(encodedUrl);

    console.log('Decoded URL:', calendarUrl);

    if (!calendarUrl) {
      return res.status(400).json({ error: 'Invalid URL encoding' });
    }

    // Fetch and parse iCal data
    const response = await fetch(calendarUrl);
    if (!response.ok) {
      return res.status(response.status).json({
        error: `Failed to fetch calendar: ${response.statusText}`
      });
    }

    const icalData = await response.text();

    // Parse iCal data
    const jcalData = ICAL.parse(icalData);
    const component = new ICAL.Component(jcalData);
    const vevents = component.getAllSubcomponents('vevent');

    // Extract events
    const events = vevents.map(vevent => {
      const event = new ICAL.Event(vevent);
      return {
        uid: event.uid,
        summary: event.summary,
        description: event.description,
        location: event.location,
        startDate: event.startDate.toJSDate(),
        endDate: event.endDate.toJSDate()
      };
    });

    console.log(`Fetched ${events.length} events from calendar`);

    // Create a new iCal calendar following fiCal's implementation
    const calendar = new ICAL.Component(['vcalendar', [], []]);

    // Set required calendar properties - keep minimal like fiCal does
    calendar.updatePropertyWithValue('prodid', '-//iCal Filter//EN');
    calendar.updatePropertyWithValue('version', '2.0');
    calendar.updatePropertyWithValue('calscale', 'GREGORIAN');
    calendar.updatePropertyWithValue('method', 'PUBLISH');

    // Add filtered events to the calendar
    events.forEach(event => {
      const vevent = new ICAL.Component(['vevent', [], []]); // Ensure vevent is properly initialized

      // Convert dates to ICAL.Time
      const startDate = ICAL.Time.fromJSDate(new Date(event.startDate), true);
      const endDate = ICAL.Time.fromJSDate(new Date(event.endDate), true);

      // Set event properties
      vevent.updatePropertyWithValue('summary', event.summary);
      vevent.updatePropertyWithValue('dtstart', startDate);
      vevent.updatePropertyWithValue('dtend', endDate);

      // Generate a unique identifier if none exists
      const uid = event.uid || `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
      vevent.updatePropertyWithValue('uid', uid);

      // Set creation timestamp
      const dtstamp = ICAL.Time.now();
      vevent.updatePropertyWithValue('dtstamp', dtstamp);

      if (event.description) {
        vevent.updatePropertyWithValue('description', event.description);
      }
      if (event.location) {
        vevent.updatePropertyWithValue('location', event.location);
      }

      calendar.addSubcomponent(vevent);
    });

    // Generate iCal content directly from the component
    // This ensures proper formatting according to RFC 5545
    const icsContent = calendar.toString();

    // Set proper Content-Type header for iCalendar with necessary parameters
    res.setHeader('Content-Type', 'text/calendar; charset=utf-8');
    res.setHeader('Content-Disposition', 'attachment; filename="calendar.ics"');
    // Add cache control headers to ensure fresh content
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');

    // Send the iCal content generated by the library
    res.status(200).send(icsContent);
  } catch (error) {
    console.error('Calendar API error:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
}
